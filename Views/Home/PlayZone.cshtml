@{
    ViewData["Title"] = "Play Zone";
}

<div class="container py-5">
    <div class="row mb-5">
        <div class="col-lg-8 mx-auto text-center">
            <h1 class="display-4 fw-bold mb-3">Play Zone</h1>
            <p class="lead text-secondary">Let's play Snake!</p>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Username Input (Initially visible) -->
            <div id="usernameSection" class="card mb-4">
                <div class="card-body text-center">
                    <h3 class="h5 mb-3">Enter Your Name to Play</h3>
                    <div class="input-group mb-3 w-75 mx-auto">
                        <input type="text" id="playerName" class="form-control" placeholder="Your name">
                        <button class="btn btn-primary" id="startPlaying">Start Playing</button>
                    </div>
                </div>
            </div>

            <!-- Game Section (Initially hidden) -->
            <div id="gameSection" class="card" style="display: none;">
                <div class="card-body">
                    <div class="game-container">
                        <canvas id="gameCanvas" width="600" height="400"></canvas>
                    </div>
                    <div class="text-center mt-3">
                        <p class="mb-2">Player: <span id="currentPlayer"></span> | Score: <span id="score">0</span></p>
                        <button id="startButton" class="btn btn-primary">Start Game</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Top Players Section -->
    <div class="row mt-5">
        <div class="col-lg-8 mx-auto">
            <h2 class="text-center mb-4">Top Players</h2>
            <div class="row justify-content-center" id="topPlayers">
                <div class="col-md-4 mb-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title">1st Place</h5>
                            <p class="player-name" id="firstPlace">-</p>
                            <p class="player-score" id="firstScore">-</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title">2nd Place</h5>
                            <p class="player-name" id="secondPlace">-</p>
                            <p class="player-score" id="secondScore">-</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title">3rd Place</h5>
                            <p class="player-name" id="thirdPlace">-</p>
                            <p class="player-score" id="thirdScore">-</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Welcome Modal -->
<div class="modal fade" id="welcomeModal" tabindex="-1" aria-labelledby="welcomeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="welcomeModalLabel">Welcome to Play Zone!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p>Hey, I am Anastasiia! I loved playing snake game as a kid. Try to beat me! Show your best!</p>
                <img src="~/images/snake-game.png" alt="Snake Game" class="img-fluid mb-3" style="max-width: 200px;">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Let's Play!</button>
            </div>
        </div>
    </div>
</div>

<style>
    .game-container {
        display: flex;
        justify-content: center;
        background-color: #D4D4D4;
        border-radius: 8px;
        padding: 20px;
    }

    #gameCanvas {
        border: 2px solid #B3B3B3;
        border-radius: 4px;
    }

    .card {
        border: none;
        box-shadow: var(--shadow);
        transition: transform 0.2s ease;
    }

    .card:hover {
        transform: translateY(-2px);
    }

    .player-name {
        font-size: 1.2rem;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .player-score {
        font-size: 2rem;
        font-weight: bold;
        color: #2B2B2B;
        margin-bottom: 0;
    }
</style>

@section Scripts {
    <script src="~/js/snake-game.js"></script>
    <script>
        $(document).ready(function() {
            // Show welcome modal on page load
            $('#welcomeModal').modal('show');

            // Initialize top players from localStorage or set defaults
            let topPlayers = JSON.parse(localStorage.getItem('snakeTopPlayers')) || [
                { name: "Ana", score: 190 },
                { name: "New", score: 20 },
                { name: "Ana", score: 10 }
            ];
            updateTopPlayersDisplay();

            // Handle start playing button click
            $('#startPlaying').click(function() {
                const playerName = $('#playerName').val().trim();
                if (playerName) {
                    $('#currentPlayer').text(playerName);
                    $('#usernameSection').hide();
                    $('#gameSection').show();
                    initGame();
                } else {
                    alert('Please enter your name to play!');
                }
            });

            const canvas = document.getElementById('gameCanvas');
            const ctx = canvas.getContext('2d');
            const startButton = document.getElementById('startButton');
            const scoreElement = document.getElementById('score');

            const gridSize = 20;
            const tileCount = canvas.width / gridSize;
            let snake = [];
            let food = {};
            let direction = 'right';
            let score = 0;
            let gameLoop;
            let gameSpeed = 100;

            function initGame() {
                snake = [
                    { x: 5, y: 5 }
                ];
                direction = 'right';
                score = 0;
                scoreElement.textContent = score;
                generateFood();
            }

            function generateFood() {
                food = {
                    x: Math.floor(Math.random() * tileCount),
                    y: Math.floor(Math.random() * tileCount)
                };
                // Make sure food doesn't spawn on snake
                for (let segment of snake) {
                    if (segment.x === food.x && segment.y === food.y) {
                        generateFood();
                        break;
                    }
                }
            }

            function drawGame() {
                // Clear canvas
                ctx.fillStyle = '#f8f9fa';
                ctx.fillRect(0, 0, canvas.width, canvas.height);

                // Draw snake
                ctx.fillStyle = '#0d6efd';
                for (let segment of snake) {
                    ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize - 2, gridSize - 2);
                }

                // Draw food
                ctx.fillStyle = '#dc3545';
                ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 2, gridSize - 2);
            }

            function moveSnake() {
                const head = { ...snake[0] };

                switch (direction) {
                    case 'up': head.y--; break;
                    case 'down': head.y++; break;
                    case 'left': head.x--; break;
                    case 'right': head.x++; break;
                }

                // Check for collisions
                if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                    gameOver();
                    return;
                }

                for (let segment of snake) {
                    if (head.x === segment.x && head.y === segment.y) {
                        gameOver();
                        return;
                    }
                }

                snake.unshift(head);

                // Check if snake ate food
                if (head.x === food.x && head.y === food.y) {
                    score += 10;
                    scoreElement.textContent = score;
                    generateFood();
                    // Increase speed every 50 points
                    if (score % 50 === 0) {
                        gameSpeed = Math.max(50, gameSpeed - 10);
                        clearInterval(gameLoop);
                        gameLoop = setInterval(gameStep, gameSpeed);
                    }
                } else {
                    snake.pop();
                }
            }

            function gameStep() {
                moveSnake();
                drawGame();
            }

            function updateTopPlayersDisplay() {
                topPlayers.sort((a, b) => b.score - a.score);
                if (topPlayers[0]) {
                    $('#firstPlace').text(topPlayers[0].name);
                    $('#firstScore').text(topPlayers[0].score);
                }
                if (topPlayers[1]) {
                    $('#secondPlace').text(topPlayers[1].name);
                    $('#secondScore').text(topPlayers[1].score);
                }
                if (topPlayers[2]) {
                    $('#thirdPlace').text(topPlayers[2].name);
                    $('#thirdScore').text(topPlayers[2].score);
                }
            }

            function gameOver() {
                clearInterval(gameLoop);
                const playerName = $('#currentPlayer').text();
                const finalScore = score;
                
                // Update top players
                topPlayers.push({ name: playerName, score: finalScore });
                topPlayers.sort((a, b) => b.score - a.score);
                topPlayers = topPlayers.slice(0, 3); // Keep only top 3
                localStorage.setItem('snakeTopPlayers', JSON.stringify(topPlayers));
                updateTopPlayersDisplay();

                alert(`Game Over! ${playerName}, your score: ${finalScore}`);
                startButton.textContent = 'Play Again';
                startButton.disabled = false;
            }

            startButton.addEventListener('click', function() {
                initGame();
                startButton.textContent = 'Playing...';
                startButton.disabled = true;
                gameLoop = setInterval(gameStep, gameSpeed);
            });

            document.addEventListener('keydown', function(event) {
                switch (event.key) {
                    case 'ArrowUp':
                        if (direction !== 'down') direction = 'up';
                        break;
                    case 'ArrowDown':
                        if (direction !== 'up') direction = 'down';
                        break;
                    case 'ArrowLeft':
                        if (direction !== 'right') direction = 'left';
                        break;
                    case 'ArrowRight':
                        if (direction !== 'left') direction = 'right';
                        break;
                }
            });
        });
    </script>
} 