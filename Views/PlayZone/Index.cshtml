@using System.Linq
@model List<PlayerScore>
@{
    ViewData["Title"] = "Play Zone";
    var topScores = (ViewBag.TopScores as IEnumerable<PlayerScore>)?.ToList() ?? new List<PlayerScore>();
    var displayScores = topScores.OrderByDescending(s => s.Score).Take(3).ToList();
}

@section Styles {
    <style>
        :root {
            --primary: #2C3E50;
            --primary-dark: #1A252F;
            --secondary: #34495E;
            --dark: #1F2937;
            --light: #F9FAFB;
            --gray: #6B7280;
            --success: #27AE60;
            --warning: #F39C12;
            --glass-bg: rgba(248, 249, 254, 0.95);
            --glass-border: rgba(44, 62, 80, 0.1);
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            --gradient-welcome: linear-gradient(135deg, #3498DB 0%, #2980B9 100%);
            --gradient-primary: linear-gradient(135deg, #2C3E50 0%, #1A252F 100%);
            --gradient-secondary: linear-gradient(135deg, #34495E 0%, #2C3E50 100%);
        }

        .playzone-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 2rem;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            border-radius: 24px;
            box-shadow: var(--shadow-lg);
            border: 1px solid var(--glass-border);
        }

        .welcome-section {
            text-align: center;
            margin-bottom: 3rem;
            padding: 2rem;
            background: var(--gradient-welcome);
            border-radius: 20px;
            color: white;
            box-shadow: var(--shadow-md);
            position: relative;
            overflow: hidden;
        }

        .welcome-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 100%);
            pointer-events: none;
        }

        .welcome-section h2 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .welcome-section p {
            font-size: 1.2rem;
            opacity: 0.9;
            max-width: 600px;
            margin: 0 auto;
        }

        .player-form {
            background: white;
            border-radius: 20px;
            padding: 2.5rem;
            max-width: 500px;
            margin: 0 auto;
            box-shadow: var(--shadow-md);
            text-align: center;
            border: 1px solid var(--glass-border);
        }

        .player-form h2 {
            color: var(--dark);
            font-size: 1.8rem;
            margin-bottom: 2rem;
            font-weight: 600;
        }

        .form-control {
            background: var(--light);
            border: 2px solid var(--glass-border);
            border-radius: 12px;
            padding: 1rem 1.5rem;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(44, 62, 80, 0.1);
        }

        .btn-play {
            background: var(--gradient-primary);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            width: 100%;
            margin-top: 1rem;
            box-shadow: var(--shadow-sm);
        }

        .btn-play:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(44, 62, 80, 0.2);
        }

        .game-container {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            margin-top: 2rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--glass-border);
        }

        #gameCanvas {
            width: 100%;
            max-width: 600px;
            height: auto;
            border-radius: 12px;
            background: var(--light);
            box-shadow: var(--shadow-sm);
        }

        .score-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .score-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            text-align: center;
            box-shadow: var(--shadow-md);
            transition: transform 0.3s ease;
            border: 1px solid var(--glass-border);
        }

        .score-card:hover {
            transform: translateY(-5px);
        }

        .score-label {
            color: var(--gray);
            font-size: 1rem;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .score-value {
            color: var(--primary);
            font-size: 2rem;
            font-weight: 700;
        }

        .leaderboard {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            margin-top: 3rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--glass-border);
        }

        .leaderboard h2 {
            color: var(--dark);
            font-size: 1.8rem;
            margin-bottom: 2rem;
            text-align: center;
            font-weight: 600;
        }

        .leaderboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .player-card {
            background: var(--light);
            border-radius: 16px;
            padding: 1.5rem;
            text-align: center;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            border: 1px solid var(--glass-border);
        }

        .player-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
        }

        .player-rank {
            position: absolute;
            top: 1rem;
            left: 1rem;
            background: var(--gradient-secondary);
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .player-name {
            color: var(--dark);
            font-size: 1.2rem;
            font-weight: 600;
            margin: 1rem 0;
        }

        .player-score {
            color: var(--primary);
            font-size: 2rem;
            font-weight: 700;
        }

        .game-over {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 24px;
            padding: 3rem;
            text-align: center;
            box-shadow: var(--shadow-lg);
            z-index: 1000;
            width: 90%;
            max-width: 400px;
            display: none;
            border: 1px solid var(--glass-border);
        }

        .game-over h2 {
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
        }

        .game-over p {
            color: var(--gray);
            font-size: 1.2rem;
            margin-bottom: 2rem;
        }

        .btn-group {
            display: grid;
            gap: 1rem;
        }

        .btn-restart {
            background: var(--gradient-primary);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1.1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-sm);
        }

        .btn-new {
            background: var(--gradient-secondary);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1.1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-sm);
        }

        .btn-restart:hover,
        .btn-new:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        @@media (max-width: 768px) {
            .playzone-container {
                margin: 1rem;
                padding: 1rem;
            }

            .welcome-section {
                padding: 1.5rem;
            }

            .welcome-section h2 {
                font-size: 2rem;
            }

            .player-form {
                padding: 1.5rem;
            }

            .game-container {
                padding: 1rem;
            }

            .score-section {
                grid-template-columns: 1fr;
            }

            .game-over {
                padding: 2rem;
            }
        }

        /* Name Input Dialog Styles */
        .name-dialog {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(31, 41, 55, 0.95);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .name-dialog-content {
            background: white;
            border-radius: 24px;
            padding: 2.5rem;
            width: 90%;
            max-width: 450px;
            text-align: center;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            border: 1px solid var(--glass-border);
            animation: dialogSlideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1);
        }

        .name-dialog-header {
            margin-bottom: 2rem;
        }

        .name-dialog-header h2 {
            font-size: 2rem;
            color: var(--dark);
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: var(--gradient-welcome);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .name-dialog-header p {
            color: var(--gray);
            font-size: 1.1rem;
        }

        .name-input-container {
            margin-bottom: 2rem;
        }

        .name-input {
            width: 100%;
            padding: 1rem 1.5rem;
            font-size: 1.1rem;
            border: 2px solid var(--glass-border);
            border-radius: 12px;
            background: var(--light);
            color: var(--dark);
            transition: all 0.3s ease;
        }

        .name-input:focus {
            border-color: #3498DB;
            box-shadow: 0 0 0 4px rgba(52, 152, 219, 0.2);
            outline: none;
        }

        .name-input::placeholder {
            color: var(--gray);
        }

        .start-game-btn {
            background: var(--gradient-welcome);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            width: 100%;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .start-game-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(52, 152, 219, 0.25);
        }

        .start-game-btn .btn-icon {
            transition: transform 0.3s ease;
        }

        .start-game-btn:hover .btn-icon {
            transform: translateX(5px);
        }

        .error-shake {
            animation: shake 0.4s cubic-bezier(.36,.07,.19,.97) both;
        }

        @@keyframes dialogSlideIn {
            0% {
                opacity: 0;
                transform: translateY(-20px) scale(0.95);
            }
            100% {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        @@keyframes shake {
            10%, 90% { transform: translate3d(-1px, 0, 0); }
            20%, 80% { transform: translate3d(2px, 0, 0); }
            30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
            40%, 60% { transform: translate3d(4px, 0, 0); }
        }

        /* Mobile Adjustments */
        @@media (max-width: 768px) {
            .name-dialog-content {
                padding: 2rem;
                margin: 1rem;
            }

            .name-dialog-header h2 {
                font-size: 1.75rem;
            }

            .name-input {
                padding: 0.875rem 1.25rem;
                font-size: 1rem;
            }

            .start-game-btn {
                padding: 0.875rem 1.5rem;
                font-size: 1rem;
            }
        }

        /* Animation keyframes */
        @@keyframes foodCollection {
            0% { transform: scale(1); opacity: 1; }
            100% { transform: scale(2); opacity: 0; }
        }
        
        .high-score-animation {
            animation: highScorePulse 1s ease-in-out;
        }
        
        @@keyframes highScorePulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); color: #4ade80; }
            100% { transform: scale(1); }
        }

        .score-animation {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        /* Pause overlay styles */
        .pause-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            z-index: 999;
        }

        .pause-button {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 10px;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            cursor: pointer;
            z-index: 1000;
        }
    </style>
}

<div class="playzone-container">
    <!-- Name Input Dialog -->
    <div class="name-dialog" id="nameInputDialog">
        <div class="name-dialog-content">
            <div class="name-dialog-header">
                <h2>Welcome to Snake Game!</h2>
                <p>Please enter your name to start the game</p>
            </div>
            <div class="name-input-container">
                <input type="text" 
                       class="name-input" 
                       id="playerNameInput" 
                       placeholder="Your name" 
                       maxlength="20" 
                       autocomplete="off"
                       autofocus
                       tabindex="1">
            </div>
            <button class="start-game-btn" id="startGameButton" tabindex="2">
                <span>Start Game</span>
                <span class="btn-icon">→</span>
            </button>
        </div>
    </div>

    <div class="welcome-section">
        <h2>Welcome to Snake Game</h2>
        <p>I used to love playing Snake as a kid.
Think you can beat my high score?</p>
    </div>

    <div class="game-container" style="display: none;">
        <div class="text-center mb-4">
            <p class="text-muted">Use arrow keys to control the snake. Collect food to grow!</p>
        </div>
        <div class="d-flex justify-content-center">
            <canvas id="gameCanvas"></canvas>
        </div>
    </div>

    <div class="score-section">
        <div class="score-card">
            <div class="score-label">Current Score</div>
            <div id="score" class="score-value">0</div>
        </div>
        <div class="score-card">
            <div class="score-label">Best Score</div>
            <div id="bestScore" class="score-value">0</div>
        </div>
    </div>

    <div class="leaderboard">
        <h2>Top Players</h2>
        <div class="leaderboard-grid">
            @foreach (var score in displayScores)
            {
                <div class="player-card">
                    <div class="player-rank">@(displayScores.IndexOf(score) + 1)</div>
                    <div class="player-name">@score.PlayerName</div>
                    <div class="player-score">@score.Score</div>
                </div>
            }
        </div>
    </div>
</div>

<div class="game-over" id="gameOver">
    <h2>Game Over!</h2>
    <p>Your score: <span id="finalScore">0</span></p>
    <div class="btn-group">
        <button class="btn-restart" onclick="restartGame()">
            <i class="fas fa-redo me-2"></i>Play Again
        </button>
        <button class="btn-new" onclick="newGame()">
            <i class="fas fa-user me-2"></i>New Player
        </button>
    </div>
</div>

@section Scripts {
    <script>
        // Declare game variables in the global scope
        let playerName = '';
        let gameStarted = false;
        let gridSize = 20;
        let highScore = 0;
        let canvas;
        let ctx;
        let gameLoop;
        let snake;
        let food;
        let direction;
        let score;
        let isGameOver = false;
        let gameSpeed = 200;
        let isPaused = false;
        let queuedDirection = null;
        let lastDirectionChange = 0;
        const directionChangeCooldown = 50; // Minimum time between direction changes

        // Initialize game function
        function initGame() {
            // Clear any existing game loop
            if (gameLoop) {
                clearInterval(gameLoop);
            }

            // Reset game state
            isGameOver = false;
            isPaused = false;
            gameSpeed = 200; // Reset to initial speed
            
            // Start snake in the middle
            const startX = Math.floor((canvas.width / gridSize) / 2) * gridSize;
            const startY = Math.floor((canvas.height / gridSize) / 2) * gridSize;
            
            snake = [{x: startX, y: startY}];
            direction = {x: gridSize, y: 0};
            score = 0;
            document.getElementById('score').textContent = '0';
            generateFood();
            
            // Start game loop
            gameLoop = setInterval(updateGame, gameSpeed);
        }

        function generateFood() {
            let attempts = 0;
            const maxAttempts = 100;
            let newFood;
            
            do {
                newFood = {
                    x: Math.floor(Math.random() * (canvas.width / gridSize)) * gridSize,
                    y: Math.floor(Math.random() * (canvas.height / gridSize)) * gridSize
                };
                
                let onSnake = false;
                for (let segment of snake) {
                    if (segment.x === newFood.x && segment.y === newFood.y) {
                        onSnake = true;
                        break;
                    }
                }
                
                if (!onSnake) {
                    food = newFood;
                    return;
                }
                
                attempts++;
            } while (attempts < maxAttempts);
            
            console.error('Could not generate food position');
        }

        function updateGame() {
            if (isGameOver || isPaused) return;

            // Adjust game speed based on score
            const newSpeed = Math.max(50, 200 - Math.floor(score / 5) * 10);
            if (newSpeed !== gameSpeed) {
                gameSpeed = newSpeed;
                clearInterval(gameLoop);
                gameLoop = setInterval(updateGame, gameSpeed);
            }

            // Apply queued direction change if available and cooldown has passed
            const now = Date.now();
            if (queuedDirection && now - lastDirectionChange >= directionChangeCooldown) {
                const currentDirection = { ...direction };
                if ((queuedDirection.x === 0 && currentDirection.y === 0) || 
                    (queuedDirection.y === 0 && currentDirection.x === 0)) {
                    direction = queuedDirection;
                    lastDirectionChange = now;
                }
                queuedDirection = null;
            }

            const head = { x: snake[0].x + direction.x, y: snake[0].y + direction.y };

            if (head.x < 0 || head.x >= canvas.width || head.y < 0 || head.y >= canvas.height) {
                endGame();
                return;
            }

            for (let i = 0; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    endGame();
                    return;
                }
            }

            snake.unshift(head);

            const collisionMargin = gridSize * 0.7;
            if (Math.abs(head.x - food.x) < collisionMargin && Math.abs(head.y - food.y) < collisionMargin) {
                // Add score with animation
                const points = 10;
                score += points;
                showScoreAnimation(points, head.x, head.y);
                document.getElementById('score').textContent = score;
                
                if (score > highScore) {
                    highScore = score;
                    document.getElementById('bestScore').textContent = highScore;
                    showHighScoreAnimation();
                }
                
                // Add food collection effect
                showFoodCollectionEffect(food.x, food.y);
                generateFood();
            } else {
                snake.pop();
            }

            draw();
        }

        function showScoreAnimation(points, x, y) {
            const scoreElement = document.createElement('div');
            scoreElement.className = 'score-animation';
            scoreElement.textContent = `+${points}`;
            scoreElement.style.position = 'absolute';
            scoreElement.style.left = `${x}px`;
            scoreElement.style.top = `${y}px`;
            scoreElement.style.color = '#4ade80';
            scoreElement.style.fontSize = '20px';
            scoreElement.style.fontWeight = 'bold';
            scoreElement.style.textShadow = '0 0 10px rgba(74, 222, 128, 0.5)';
            scoreElement.style.zIndex = '1000';
            scoreElement.style.transition = 'all 0.5s ease-out';
            scoreElement.style.opacity = '1';
            scoreElement.style.transform = 'translateY(0)';
            
            document.querySelector('.game-container').appendChild(scoreElement);
            
            setTimeout(() => {
                scoreElement.style.opacity = '0';
                scoreElement.style.transform = 'translateY(-30px)';
                setTimeout(() => scoreElement.remove(), 500);
            }, 100);
        }

        function showHighScoreAnimation() {
            const highScoreElement = document.getElementById('bestScore');
            highScoreElement.classList.add('high-score-animation');
            setTimeout(() => highScoreElement.classList.remove('high-score-animation'), 1000);
        }

        function showFoodCollectionEffect(x, y) {
            const effect = document.createElement('div');
            effect.className = 'food-collection-effect';
            effect.style.position = 'absolute';
            effect.style.left = `${x}px`;
            effect.style.top = `${y}px`;
            effect.style.width = `${gridSize}px`;
            effect.style.height = `${gridSize}px`;
            effect.style.borderRadius = '50%';
            effect.style.background = 'radial-gradient(circle, rgba(244,63,94,0.8) 0%, rgba(244,63,94,0) 70%)';
            effect.style.zIndex = '999';
            effect.style.animation = 'foodCollection 0.5s ease-out forwards';
            
            document.querySelector('.game-container').appendChild(effect);
            setTimeout(() => effect.remove(), 500);
        }

        function draw() {
            // Clear canvas with a dark gradient background
            const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
            gradient.addColorStop(0, '#1a1a2e');
            gradient.addColorStop(1, '#16213e');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw subtle grid
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.05)';
            ctx.lineWidth = 0.5;
            for (let i = 0; i < canvas.width; i += gridSize) {
                ctx.beginPath();
                ctx.moveTo(i, 0);
                ctx.lineTo(i, canvas.height);
                ctx.stroke();
            }
            for (let i = 0; i < canvas.height; i += gridSize) {
                ctx.beginPath();
                ctx.moveTo(0, i);
                ctx.lineTo(canvas.width, i);
                ctx.stroke();
            }

            // Draw snake with modern gradient and glow effect
            snake.forEach((segment, index) => {
                const segmentSize = gridSize - 2; // Slightly smaller for gap effect
                const offset = (gridSize - segmentSize) / 2;
                
                if (index === 0) {
                    // Head with neon effect
                    ctx.shadowColor = '#4ade80';
                    ctx.shadowBlur = 15;
                    const headGradient = ctx.createLinearGradient(
                        segment.x + offset,
                        segment.y + offset,
                        segment.x + offset + segmentSize,
                        segment.y + offset + segmentSize
                    );
                    headGradient.addColorStop(0, '#4ade80');
                    headGradient.addColorStop(1, '#22c55e');
                    ctx.fillStyle = headGradient;
                    
                    // Round rectangle for head
                    ctx.beginPath();
                    ctx.roundRect(segment.x + offset, segment.y + offset, segmentSize, segmentSize, 8);
                    ctx.fill();
                    
                    // Eyes
                    ctx.shadowBlur = 0;
                    ctx.fillStyle = '#ffffff';
                    const eyeSize = segmentSize * 0.15;
                    const eyeOffset = segmentSize * 0.25;
                    
                    // Direction-based eye positioning
                    let eyeX1, eyeX2, eyeY1, eyeY2;
                    if (direction.x > 0) { // Moving right
                        eyeX1 = segment.x + offset + segmentSize - eyeOffset * 1.5;
                        eyeX2 = eyeX1;
                        eyeY1 = segment.y + offset + eyeOffset;
                        eyeY2 = segment.y + offset + segmentSize - eyeOffset * 1.5;
                    } else if (direction.x < 0) { // Moving left
                        eyeX1 = segment.x + offset + eyeOffset;
                        eyeX2 = eyeX1;
                        eyeY1 = segment.y + offset + eyeOffset;
                        eyeY2 = segment.y + offset + segmentSize - eyeOffset * 1.5;
                    } else if (direction.y < 0) { // Moving up
                        eyeX1 = segment.x + offset + eyeOffset;
                        eyeX2 = segment.x + offset + segmentSize - eyeOffset * 1.5;
                        eyeY1 = segment.y + offset + eyeOffset;
                        eyeY2 = eyeY1;
                    } else { // Moving down
                        eyeX1 = segment.x + offset + eyeOffset;
                        eyeX2 = segment.x + offset + segmentSize - eyeOffset * 1.5;
                        eyeY1 = segment.y + offset + segmentSize - eyeOffset * 1.5;
                        eyeY2 = eyeY1;
                    }
                    
                    ctx.beginPath();
                    ctx.arc(eyeX1, eyeY1, eyeSize, 0, Math.PI * 2);
                    ctx.arc(eyeX2, eyeY2, eyeSize, 0, Math.PI * 2);
                    ctx.fill();
                } else {
                    // Body segments with gradient and glow
                    ctx.shadowColor = '#4ade80';
                    ctx.shadowBlur = 10;
                    const bodyGradient = ctx.createLinearGradient(
                        segment.x + offset,
                        segment.y + offset,
                        segment.x + offset + segmentSize,
                        segment.y + offset + segmentSize
                    );
                    bodyGradient.addColorStop(0, '#22c55e');
                    bodyGradient.addColorStop(1, '#16a34a');
                    ctx.fillStyle = bodyGradient;
                    
                    // Round rectangle for body segments
                    ctx.beginPath();
                    ctx.roundRect(segment.x + offset, segment.y + offset, segmentSize, segmentSize, 6);
                    ctx.fill();
                }
            });

            // Reset shadow for food
            ctx.shadowBlur = 0;

            // Draw food with pulsing effect
            const pulseSize = Math.sin(Date.now() / 200) * 2;
            const centerX = food.x + gridSize/2;
            const centerY = food.y + gridSize/2;
            const baseRadius = gridSize/3;
            const radius = baseRadius + pulseSize;

            // Outer glow
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius * 1.5, 0, Math.PI * 2);
            ctx.fillStyle = 'rgba(244, 63, 94, 0.2)';
            ctx.fill();

            // Inner glow
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius * 1.2, 0, Math.PI * 2);
            ctx.fillStyle = 'rgba(244, 63, 94, 0.4)';
            ctx.fill();

            // Main food circle
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
            const foodGradient = ctx.createRadialGradient(
                centerX - radius/3,
                centerY - radius/3,
                radius/4,
                centerX,
                centerY,
                radius
            );
            foodGradient.addColorStop(0, '#f43f5e');
            foodGradient.addColorStop(1, '#e11d48');
            ctx.fillStyle = foodGradient;
            ctx.fill();

            // Shine effect
            ctx.beginPath();
            ctx.arc(centerX - radius/3, centerY - radius/3, radius/3, 0, Math.PI * 2);
            ctx.fillStyle = 'rgba(255, 255, 255, 0.4)';
            ctx.fill();

            // Request next frame for smooth animation
            requestAnimationFrame(draw);
        }

        function endGame() {
            isGameOver = true;
            clearInterval(gameLoop);
            document.getElementById('finalScore').textContent = score;
            document.getElementById('gameOver').style.display = 'block';
            saveScore();
        }

        function restartGame() {
            document.getElementById('gameOver').style.display = 'none';
            initGame();
        }

        function newGame() {
            document.getElementById('gameOver').style.display = 'none';
            document.getElementById('nameInputDialog').style.display = 'flex';
            document.getElementById('playerNameInput').value = '';
            document.getElementById('playerNameInput').focus();
            document.querySelector('.game-container').style.display = 'none';
        }

        function updateTopScores(scores) {
            const scoreList = document.querySelector('.score-list');
            const scoreItems = scoreList.querySelectorAll('.score-item-top');
            
            for (let i = 0; i < 3; i++) {
                const score = i < scores.length ? scores[i] : null;
                const scoreItem = scoreItems[i];
                const nameSpan = scoreItem.querySelector('.player-name');
                const scoreSpan = scoreItem.querySelector('.player-score');
                
                if (score) {
                    nameSpan.textContent = score.playerName;
                    scoreSpan.textContent = score.score;
                } else {
                    nameSpan.textContent = '---';
                    scoreSpan.textContent = '0';
                }
            }
        }

        function saveScore() {
            fetch('/PlayZone/SaveScore', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    playerName: playerName,
                    score: score
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.topScores) {
                    updateTopScores(data.topScores);
                }
            })
            .catch(error => console.error('Error saving score:', error));
        }

        // Add keyboard controls
        let lastKeyPress = 0;
        const keyDebounceTime = 20; // Reduced for more responsive controls

        document.addEventListener('keydown', (event) => {
            if (isGameOver || isPaused) return;

            const now = Date.now();
            if (now - lastKeyPress < keyDebounceTime) {
                // Queue the direction change if it's different from current
                switch (event.key) {
                    case 'ArrowUp':
                        if (direction.y === 0) queuedDirection = { x: 0, y: -gridSize };
                        break;
                    case 'ArrowDown':
                        if (direction.y === 0) queuedDirection = { x: 0, y: gridSize };
                        break;
                    case 'ArrowLeft':
                        if (direction.x === 0) queuedDirection = { x: -gridSize, y: 0 };
                        break;
                    case 'ArrowRight':
                        if (direction.x === 0) queuedDirection = { x: gridSize, y: 0 };
                        break;
                }
                return;
            }
            lastKeyPress = now;

            // Store current direction before change
            const currentDirection = { ...direction };

            // Only allow direction change if cooldown has passed
            if (now - lastDirectionChange >= directionChangeCooldown) {
                switch (event.key) {
                    case 'ArrowUp':
                        if (currentDirection.y === 0) {
                            direction = { x: 0, y: -gridSize };
                            lastDirectionChange = now;
                        }
                        break;
                    case 'ArrowDown':
                        if (currentDirection.y === 0) {
                            direction = { x: 0, y: gridSize };
                            lastDirectionChange = now;
                        }
                        break;
                    case 'ArrowLeft':
                        if (currentDirection.x === 0) {
                            direction = { x: -gridSize, y: 0 };
                            lastDirectionChange = now;
                        }
                        break;
                    case 'ArrowRight':
                        if (currentDirection.x === 0) {
                            direction = { x: gridSize, y: 0 };
                            lastDirectionChange = now;
                        }
                        break;
                    case ' ': // Space bar to pause/resume
                        if (gameLoop) {
                            clearInterval(gameLoop);
                            gameLoop = null;
                        } else {
                            gameLoop = setInterval(updateGame, gameSpeed);
                        }
                        break;
                }
            }
            event.preventDefault();
        });

        // Improved touch controls
        let touchStartX = 0;
        let touchStartY = 0;
        let lastTouchMove = 0;
        const touchDebounceTime = 50; // Prevent too frequent touch events

        document.addEventListener('touchstart', function(event) {
            touchStartX = event.touches[0].clientX;
            touchStartY = event.touches[0].clientY;
            lastTouchMove = Date.now();
        });

        document.addEventListener('touchmove', function(event) {
            if (!touchStartX || !touchStartY || isGameOver) return;

            const now = Date.now();
            if (now - lastTouchMove < touchDebounceTime) return;
            lastTouchMove = now;

            const touchEndX = event.touches[0].clientX;
            const touchEndY = event.touches[0].clientY;

            const deltaX = touchEndX - touchStartX;
            const deltaY = touchEndY - touchStartY;

            // Require minimum swipe distance
            const minSwipeDistance = 20; // Reduced from 30 for more responsive controls
            
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                if (Math.abs(deltaX) > minSwipeDistance) {
                    if (deltaX > 0 && direction.x === 0) {
                        direction = {x: gridSize, y: 0};
                    } else if (deltaX < 0 && direction.x === 0) {
                        direction = {x: -gridSize, y: 0};
                    }
                }
            } else {
                if (Math.abs(deltaY) > minSwipeDistance) {
                    if (deltaY > 0 && direction.y === 0) {
                        direction = {x: 0, y: gridSize};
                    } else if (deltaY < 0 && direction.y === 0) {
                        direction = {x: 0, y: -gridSize};
                    }
                }
            }

            touchStartX = touchEndX;
            touchStartY = touchEndY;
        });

        document.addEventListener('DOMContentLoaded', function() {
            const nameDialog = document.getElementById('nameInputDialog');
            const nameInput = document.getElementById('playerNameInput');
            const startButton = document.getElementById('startGameButton');
            const gameContainer = document.querySelector('.game-container');

            // Ensure the game container is hidden and dialog is shown
            gameContainer.style.display = 'none';
            nameDialog.style.display = 'flex';

            // Function to handle input field focus
            function handleInputFocus() {
                nameInput.style.borderColor = '#3498DB';
                nameInput.style.boxShadow = '0 0 0 4px rgba(52, 152, 219, 0.2)';
            }

            // Function to handle input field blur
            function handleInputBlur() {
                if (!nameInput.value) {
                    nameInput.style.borderColor = '';
                    nameInput.style.boxShadow = '';
                }
            }

            // Function to handle input field changes
            function handleInputChange() {
                nameInput.style.borderColor = '';
                nameInput.style.boxShadow = '';
                nameInput.classList.remove('error-shake');
            }

            // Function to ensure input field is focused
            function ensureInputFocus() {
                if (nameDialog.style.display === 'flex' && document.activeElement !== nameInput) {
                    nameInput.focus();
                }
            }

            // Set up event listeners
            nameInput.addEventListener('focus', handleInputFocus);
            nameInput.addEventListener('blur', handleInputBlur);
            nameInput.addEventListener('input', handleInputChange);
            nameInput.addEventListener('keydown', function(e) {
                // Allow all key inputs
                e.stopPropagation();
            });

            // Handle start button click
            startButton.addEventListener('click', function() {
                const inputName = nameInput.value.trim();
                if (!inputName) {
                    nameInput.classList.add('error-shake');
                    nameInput.style.borderColor = '#E74C3C';
                    nameInput.focus();
                    return;
                }

                // Store player name
                playerName = inputName;
                localStorage.setItem('playerName', playerName);
                
                // Hide dialog and show game
                nameDialog.style.opacity = '0';
                setTimeout(() => {
                    nameDialog.style.display = 'none';
                    nameDialog.style.opacity = '1';
                    gameContainer.style.display = 'block';
                    
                    // Initialize game
                    canvas = document.getElementById('gameCanvas');
                    ctx = canvas.getContext('2d');
                    
                    // Set canvas size
                    canvas.width = 600;
                    canvas.height = 450;
                    
                    // Set grid size
                    gridSize = Math.floor(canvas.width / 30);
                    
                    // Initialize game state
                    initGame();

                    // Add pause button
                    const pauseButton = document.createElement('button');
                    pauseButton.className = 'pause-button';
                    pauseButton.innerHTML = '⏸';
                    pauseButton.style.position = 'absolute';
                    pauseButton.style.top = '10px';
                    pauseButton.style.right = '10px';
                    pauseButton.style.padding = '10px';
                    pauseButton.style.borderRadius = '50%';
                    pauseButton.style.background = 'rgba(0, 0, 0, 0.5)';
                    pauseButton.style.color = 'white';
                    pauseButton.style.border = 'none';
                    pauseButton.style.cursor = 'pointer';
                    pauseButton.style.zIndex = '1000';
                    gameContainer.appendChild(pauseButton);

                    pauseButton.addEventListener('click', function() {
                        isPaused = !isPaused;
                        if (isPaused) {
                            clearInterval(gameLoop);
                            gameLoop = null;
                            pauseButton.innerHTML = '▶';
                            // Add pause overlay
                            const pauseOverlay = document.createElement('div');
                            pauseOverlay.className = 'pause-overlay';
                            pauseOverlay.style.position = 'absolute';
                            pauseOverlay.style.top = '0';
                            pauseOverlay.style.left = '0';
                            pauseOverlay.style.width = '100%';
                            pauseOverlay.style.height = '100%';
                            pauseOverlay.style.background = 'rgba(0, 0, 0, 0.5)';
                            pauseOverlay.style.display = 'flex';
                            pauseOverlay.style.alignItems = 'center';
                            pauseOverlay.style.justifyContent = 'center';
                            pauseOverlay.style.color = 'white';
                            pauseOverlay.style.fontSize = '24px';
                            pauseOverlay.style.zIndex = '999';
                            pauseOverlay.innerHTML = 'PAUSED';
                            gameContainer.appendChild(pauseOverlay);
                        } else {
                            gameLoop = setInterval(updateGame, gameSpeed);
                            pauseButton.innerHTML = '⏸';
                            const pauseOverlay = document.querySelector('.pause-overlay');
                            if (pauseOverlay) {
                                pauseOverlay.remove();
                            }
                        }
                    });
                }, 300);
            });

            // Handle Enter key
            nameInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    startButton.click();
                }
            });

            // Prevent dialog from losing focus
            nameDialog.addEventListener('mousedown', function(e) {
                if (e.target === nameDialog) {
                    e.preventDefault();
                    nameInput.focus();
                }
            });

            // Initial focus
            nameInput.focus();

            // Set up focus check interval
            const focusCheckInterval = setInterval(ensureInputFocus, 100);

            // Clean up interval when dialog is hidden
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.attributeName === 'style' && nameDialog.style.display === 'none') {
                        clearInterval(focusCheckInterval);
                    }
                });
            });

            observer.observe(nameDialog, { attributes: true });
        });
    </script>
} 