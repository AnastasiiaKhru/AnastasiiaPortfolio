@using System.Linq
@model List<PlayerScore>
@{
    ViewData["Title"] = "Snake Game";
    var topScores = (ViewBag.TopScores as IEnumerable<PlayerScore>)?.ToList() ?? new List<PlayerScore>();
    var displayScores = topScores.OrderByDescending(s => s.Score).Take(3).ToList();
}

<link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">

@section Styles {
    <style>
        :root {
            --neon-blue: #00f3ff;
            --neon-pink: #ff00ff;
            --neon-green: #39ff14;
            --neon-yellow: #ffff00;
            --dark-bg: #0a0a1f;
            --game-border: #2d2d6c;
            --glass-bg: rgba(10, 10, 31, 0.95);
            --glass-border: rgba(0, 243, 255, 0.2);
            --shadow-glow: 0 0 20px rgba(0, 243, 255, 0.3);
            --text-shadow-neon: 0 0 10px var(--neon-blue), 0 0 20px var(--neon-blue);
        }

        body {
            background: var(--dark-bg);
            color: var(--neon-blue);
            font-family: 'Press Start 2P', monospace;
        }

        .playzone-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
            background: var(--glass-bg);
            border: 2px solid var(--neon-blue);
            border-radius: 8px;
            box-shadow: var(--shadow-glow);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .game-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            flex: 1;
            padding: 1rem;
            width: 100%;
            height: 100vh;
            overflow-y: auto;
        }

        .welcome-section {
            text-align: center;
            margin: 0 auto 0.25rem;
            padding: 0.25rem; /* Reduced padding */
            max-width: 800px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            border: 1px solid #e5e7eb;
            position: relative;
            z-index: 10;
        }

        .welcome-section h2 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
            color: #1e293b;
            letter-spacing: -0.3px;
        }

        .welcome-section p {
            font-size: 0.95rem;
            color: #64748b;
            max-width: 500px;
            margin: 0 auto;
            line-height: 1.5;
            font-weight: 400;
        }

        .player-form {
            background: white;
            border-radius: 20px;
            padding: 2.5rem;
            max-width: 500px;
            margin: 0 auto;
            box-shadow: var(--shadow-md);
            text-align: center;
            border: 1px solid var(--glass-border);
        }

        .player-form h2 {
            color: var(--dark);
            font-size: 1.8rem;
            margin-bottom: 2rem;
            font-weight: 600;
        }

        .form-control {
            background: var(--light);
            border: 2px solid var(--glass-border);
            border-radius: 12px;
            padding: 1rem 1.5rem;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(44, 62, 80, 0.1);
        }

        .btn-play {
            background: var(--gradient-primary);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            width: 100%;
            margin-top: 1rem;
            box-shadow: var(--shadow-sm);
        }

        .btn-play:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(44, 62, 80, 0.2);
        }

        .game-container {
            width: 100%;
            max-width: 600px;
            height: auto;
            margin: 1rem auto;
            background: rgba(10, 10, 31, 0.98);
            border: 3px solid var(--neon-blue);
            border-radius: 8px;
            box-shadow: 0 0 30px rgba(0, 243, 255, 0.2);
            padding: 12px;
            position: relative;
            overflow: visible;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #gameCanvas {
            width: 100%;
            height: 100%;
            max-width: 580px;
            max-height: 580px;
            aspect-ratio: 1;
            display: block;
            background-color: var(--dark-bg);
            border: 2px solid var(--neon-blue);
            border-radius: 4px;
            box-shadow: inset 0 0 20px rgba(0, 243, 255, 0.1);
        }

        .score-section {
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 2rem;
            padding: 10px 0;
            margin-top: 1rem;
        }

        .score-card {
            text-align: center;
            padding: 10px 20px;
            background: var(--dark-bg);
            border: 2px solid var(--neon-pink);
            border-radius: 4px;
            box-shadow: 0 0 15px rgba(255, 0, 255, 0.2);
        }

        .score-label {
            color: var(--neon-pink);
            font-size: 0.8rem;
            margin-bottom: 5px;
            text-shadow: 0 0 5px var(--neon-pink);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .score-value {
            color: var(--neon-green);
            font-size: 1.5rem;
            font-weight: bold;
            text-shadow: 0 0 10px var(--neon-green);
        }

        .leaderboard {
            background: transparent;
            padding: 1rem;
            margin: 2rem auto;
            width: 100%;
            max-width: 800px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .leaderboard h2 {
            color: var(--neon-yellow);
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            text-align: center;
            text-shadow: 0 0 10px var(--neon-yellow);
            text-transform: uppercase;
            letter-spacing: 2px;
            width: 100%;
        }

        .leaderboard-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
            width: 100%;
            max-width: 600px;
            margin: 0 auto;
            justify-content: center;
        }

        .player-card {
            background: var(--dark-bg);
            border: 2px solid var(--neon-blue);
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
            position: relative;
            box-shadow: 0 0 15px rgba(0, 243, 255, 0.2);
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-width: 150px;
        }

        .player-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0 25px rgba(0, 243, 255, 0.4);
        }

        .player-rank {
            position: absolute;
            top: 0.5rem;
            left: 0.5rem;
            background: var(--neon-pink);
            color: var(--dark-bg);
            width: 30px;
            height: 30px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.9rem;
            box-shadow: 0 0 10px var(--neon-pink);
        }

        .player-name {
            color: var(--neon-blue);
            font-size: 1.1rem;
            margin: 1rem 0;
            text-shadow: 0 0 5px var(--neon-blue);
        }

        .player-score {
            color: var(--neon-green);
            font-size: 1.8rem;
            font-weight: bold;
            text-shadow: 0 0 10px var(--neon-green);
        }

        .game-over {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(10, 10, 31, 0.98);
            padding: 2rem;
            border: 3px solid var(--neon-pink);
            border-radius: 8px;
            text-align: center;
            z-index: 1000;
            box-shadow: 0 0 40px rgba(255, 0, 255, 0.3);
            min-width: 300px;
        }

        .game-over h2 {
            color: var(--neon-pink);
            font-size: 2rem;
            margin-bottom: 1.5rem;
            text-shadow: 0 0 15px var(--neon-pink);
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .game-over p {
            color: var(--neon-blue);
            font-size: 1.2rem;
            margin-bottom: 2rem;
            text-shadow: 0 0 8px var(--neon-blue);
        }

        .btn-group {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .btn-restart, .btn-new {
            background: var(--dark-bg);
            color: var(--neon-green);
            border: 2px solid var(--neon-green);
            padding: 12px 24px;
            border-radius: 4px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            text-shadow: 0 0 5px var(--neon-green);
            box-shadow: 0 0 15px rgba(57, 255, 20, 0.2);
        }

        .btn-restart:hover, .btn-new:hover {
            background: var(--neon-green);
            color: var(--dark-bg);
            box-shadow: 0 0 20px var(--neon-green);
            transform: translateY(-2px);
        }

        /* Mobile Adjustments - Added separately without modifying desktop view */
        @(@"@media (max-width: 768px) {
            .playzone-container {
                padding: 0.5rem;
                border-width: 1px;
            }

            .game-section {
                padding: 0.5rem;
                gap: 0.5rem;
                height: auto;
                min-height: 100vh;
            }

            .game-container {
                padding: 8px;
                margin: 0.5rem auto;
                border-width: 2px;
                width: 95vw;
                max-width: 95vw;
            }

            #gameCanvas {
                width: 100%;
                height: 100%;
                max-width: none;
                max-height: none;
                margin: 0 auto;
                touch-action: none;
            }

            .score-section {
                gap: 0.5rem;
                padding: 8px;
                margin-top: 0.5rem;
                flex-wrap: wrap;
                justify-content: center;
            }

            .score-card {
                padding: 8px 12px;
                min-width: 110px;
                flex: 0 1 auto;
            }

            .score-label {
                font-size: 0.6rem;
            }

            .score-value {
                font-size: 1rem;
            }

            .text-center.mb-4 {
                margin: 0.5rem 0 !important;
            }

            .text-center.mb-4 p {
                font-size: 0.7rem;
                padding: 4px 8px;
                margin: 0;
                line-height: 1.3;
            }

            .leaderboard {
                padding: 0.5rem;
                margin: 1rem auto;
            }

            .leaderboard h2 {
                font-size: 1.2rem;
                margin-bottom: 1rem;
            }

            .leaderboard-grid {
                grid-template-columns: repeat(1, 1fr);
                gap: 1rem;
                max-width: 300px;
            }

            .player-card {
                padding: 1rem;
                min-width: unset;
            }

            .player-name {
                font-size: 0.9rem;
                margin: 0.75rem 0;
            }

            .player-score {
                font-size: 1.4rem;
            }

            .game-over {
                width: 90%;
                max-width: 300px;
                padding: 1.5rem;
            }

            .game-over h2 {
                font-size: 1.5rem;
                margin-bottom: 1rem;
            }

            .game-over p {
                font-size: 1rem;
                margin-bottom: 1.5rem;
            }

            .btn-group {
                flex-direction: column;
                gap: 10px;
            }

            .btn-restart, .btn-new {
                width: 100%;
                padding: 10px;
                font-size: 0.9rem;
                min-height: 44px;
            }
        }")

        /* Landscape mode specific adjustments */
        @(@"@media (max-width: 768px) and (orientation: landscape) {
            .playzone-container {
                padding: 0.25rem;
            }

            .game-section {
                flex-direction: row;
                align-items: flex-start;
                padding: 0.25rem;
                gap: 1rem;
            }

            .game-container {
                flex: 0 0 auto;
                width: 80vh;
                height: 80vh;
                margin: 0;
                max-width: none;
            }

            .leaderboard {
                flex: 1;
                margin: 0;
                overflow-y: auto;
                max-height: 80vh;
            }

            .score-section {
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                background: rgba(10, 10, 31, 0.9);
                border-bottom: 1px solid var(--neon-blue);
                margin: 0;
                padding: 4px;
                z-index: 2;
            }
        }")

        /* Small phones */
        @(@"@media (max-width: 360px) {
            .playzone-container {
                padding: 0.25rem;
            }

            .game-container {
                padding: 4px;
                margin: 0.25rem auto;
                width: 98vw;
                max-width: 98vw;
            }

            .score-card {
                padding: 6px 10px;
                min-width: 100px;
            }

            .score-label {
                font-size: 0.5rem;
            }

            .score-value {
                font-size: 0.9rem;
            }

            .leaderboard h2 {
                font-size: 1rem;
            }

            .player-card {
                padding: 0.5rem;
            }

            .player-name {
                font-size: 0.8rem;
            }

            .player-score {
                font-size: 1.2rem;
            }
        }")

        /* Touch-friendly styles */
        @(@"@media (hover: none) and (pointer: coarse) {
            #gameCanvas {
                touch-action: none;
            }

            .btn-restart, .btn-new, .start-game-btn {
                min-height: 44px;
                font-size: 1rem;
            }

            #playerNameInput {
                min-height: 44px;
                font-size: 16px;
            }

            * {
                user-select: none;
                -webkit-user-select: none;
                -webkit-touch-callout: none;
            }
        }")

        /* Name Input Dialog Styles */
        .name-dialog {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background-color: rgba(10, 10, 31, 0.98);
            display: none;
            justify-content: center;
            align-items: flex-start;
            padding-top: 10vh;
            z-index: 1000;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }

        .name-dialog-content {
            background: var(--dark-bg);
            border: 3px solid var(--neon-blue);
            border-radius: 8px;
            box-shadow: 0 0 40px rgba(0, 243, 255, 0.3);
            padding: 2rem;
        }

        .dialog-header {
            margin-bottom: 2rem;
            position: relative;
        }

        .game-icon {
            width: 64px;
            height: 64px;
            margin-bottom: 1rem;
        }

        .name-dialog-content h2 {
            color: var(--neon-blue);
            text-shadow: 0 0 15px var(--neon-blue);
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .dialog-body {
            padding: 0 1.5rem;
        }

        .name-dialog-content p {
            color: var(--neon-blue);
            margin-bottom: 2rem;
            font-size: 1.2rem;
            line-height: 1.5;
        }

        .name-input-container {
            position: relative;
            margin-bottom: 2rem;
        }

        #playerNameInput {
            background: rgba(10, 10, 31, 0.8);
            border: 2px solid var(--neon-blue);
            color: var(--neon-blue);
            border-radius: 4px;
            padding: 12px 20px;
            font-size: 1rem;
            text-shadow: 0 0 5px var(--neon-blue);
            box-shadow: 0 0 15px rgba(0, 243, 255, 0.1);
        }

        #playerNameInput:focus {
            box-shadow: 0 0 20px rgba(0, 243, 255, 0.3);
            border-color: var(--neon-pink);
        }

        #playerNameInput::placeholder {
            color: var(--neon-blue);
        }

        .start-game-btn {
            background: var(--dark-bg);
            border: 2px solid var(--neon-green);
            color: var(--neon-green);
            text-shadow: 0 0 5px var(--neon-green);
            box-shadow: 0 0 15px rgba(57, 255, 20, 0.2);
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        .start-game-btn:hover {
            background: var(--neon-green);
            color: var(--dark-bg);
            box-shadow: 0 0 25px var(--neon-green);
        }

        .start-game-btn:active {
            transform: translateY(0);
        }

        .btn-text {
            z-index: 1;
        }

        .btn-icon {
            font-size: 1.2rem;
            transition: transform 0.3s ease;
        }

        .start-game-btn:hover .btn-icon {
            transform: translateX(5px);
        }

        .error-shake {
            -webkit-animation: shake 0.4s cubic-bezier(.36,.07,.19,.97) both;
            animation: shake 0.4s cubic-bezier(.36,.07,.19,.97) both;
        }

        /* Animations */
        @@-webkit-keyframes dialogFadeIn {
            0% {
                opacity: 0;
                -webkit-transform: translateY(-10vh);
                transform: translateY(-10vh);
            }
            100% {
                opacity: 1;
                -webkit-transform: translateY(0);
                transform: translateY(0);
            }
        }

        @@keyframes dialogFadeIn {
            0% {
                opacity: 0;
                transform: translateY(-10vh);
            }
            100% {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Animation keyframes */
        @@keyframes foodCollection {
            0% { transform: scale(1); opacity: 1; }
            100% { transform: scale(2); opacity: 0; }
        }
        
        .high-score-animation {
            animation: highScorePulse 1s ease-in-out;
        }
        
        @@keyframes highScorePulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); color: #4ade80; }
            100% { transform: scale(1); }
        }

        .score-animation {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        /* Pause overlay styles */
        .pause-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            z-index: 999;
        }

        .pause-button {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 10px;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            cursor: pointer;
            z-index: 1000;
        }

        /* Ensure the game container doesn't affect page scrolling */
        body.game-active {
            overflow: hidden;
            position: fixed;
            width: 100%;
            height: 100%;
        }

        .text-center.mb-4 {
            margin-bottom: 1rem !important;
            color: var(--neon-blue);
            padding: 8px 0;
            position: relative;
            z-index: 1;
        }
    </style>
}

<div class="playzone-container">
    <!-- Name Input Dialog -->
    <div class="name-dialog" id="nameInputDialog">
        <div class="name-dialog-content">
            <div class="dialog-header">
                <img src="~/images/snake-icon.svg" alt="Snake Game" class="game-icon" onerror="this.style.display='none'" />
                <h2>Welcome to Snake Game!</h2>
            </div>
            <div class="dialog-body">
                <p>Enter your name to start the adventure</p>
            <div class="name-input-container">
                <input type="text" 
                       id="playerNameInput" 
                       placeholder="Your name" 
                       maxlength="20" 
                       autocomplete="off"
                           autofocus />
            </div>
                <button class="start-game-btn" id="startGameButton">
                    <span class="btn-text">Start Game</span>
                <span class="btn-icon">→</span>
            </button>
        </div>
    </div>
    </div>

    <div class="game-section">
        <!-- Game Content -->
        <div class="game-container">
            <div class="text-center mb-4">
                <p class="text-muted">Use arrow keys to control the snake. Collect food to grow!</p>
            </div>
            <div class="d-flex justify-content-center">
                <canvas id="gameCanvas"></canvas>
            </div>
            <div class="score-section">
                <div class="score-card">
                    <div class="score-label">Current Score</div>
                    <div id="score" class="score-value">0</div>
                </div>
                <div class="score-card">
                    <div class="score-label">Best Score</div>
                    <div id="bestScore" class="score-value">0</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Leaderboard -->
        <div class="leaderboard">
            <h2>Top Players</h2>
            <div class="leaderboard-grid">
                @foreach (var score in displayScores)
                {
                    <div class="player-card">
                        <div class="player-rank">@(displayScores.IndexOf(score) + 1)</div>
                        <div class="player-name">@score.PlayerName</div>
                        <div class="player-score">@score.Score</div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Game Over Dialog -->
    <div class="game-over" id="gameOver" style="display: none;">
    <h2>Game Over!</h2>
    <p>Your score: <span id="finalScore">0</span></p>
    <div class="btn-group">
        <button class="btn-restart" onclick="restartGame()">
            <i class="fas fa-redo me-2"></i>Play Again
        </button>
        <button class="btn-new" onclick="newGame()">
            <i class="fas fa-user me-2"></i>New Player
        </button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const nameDialog = document.getElementById('nameInputDialog');
            const playerNameInput = document.getElementById('playerNameInput');
            const startGameBtn = document.getElementById('startGameButton');
            const gameOverDialog = document.getElementById('gameOver');
            const canvas = document.getElementById('gameCanvas');
            const ctx = canvas.getContext('2d');
            
            // Game settings
            const gridSize = 20; // Back to original size
            let tileCount = 20; // Back to original count
            let tileSize;
            
            // Game state
            let snake = [];
            let food = {};
            let dx = 0;
            let dy = 0;
            let score = 0;
            let bestScore = 0;
            let gameSpeed = 150;
        let gameLoop;
            let isGameRunning = false;
            
            // Show name input dialog when page loads
            nameDialog.style.display = 'flex';
            setTimeout(() => {
                playerNameInput.focus();
            }, 400);

            // Handle start game button click
            startGameBtn.addEventListener('click', startGameWithName);
            
            // Handle Enter key press
            playerNameInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    startGameWithName();
                }
            });

            function startGameWithName() {
                const playerName = playerNameInput.value.trim();
                if (playerName === '') {
                    playerNameInput.style.borderColor = '#ef4444';
                    playerNameInput.classList.add('error-shake');
                    setTimeout(() => {
                        playerNameInput.classList.remove('error-shake');
                    }, 500);
                    return;
                }
                
                // Store player name and start game
                localStorage.setItem('playerName', playerName);
                nameDialog.style.display = 'none';
                initGame();
            }

            // Remove red border when typing
            playerNameInput.addEventListener('input', function() {
                this.style.borderColor = 'rgba(74, 93, 143, 0.3)';
            });

            function initGame() {
                // Set canvas size
                resizeCanvas();
                
                // Reset game state
                snake = [{ x: Math.floor(tileCount / 2), y: Math.floor(tileCount / 2) }];
                dx = 1;
                dy = 0;
                score = 0;
                gameSpeed = 150;
                isGameRunning = true;
                document.body.classList.add('game-active');
                
                // Hide game over dialog if visible
                if (gameOverDialog) {
                    gameOverDialog.style.display = 'none';
                }
                
                // Generate initial food
                generateFood();
                
                // Start game loop
                if (gameLoop) clearInterval(gameLoop);
                gameLoop = setInterval(gameUpdate, gameSpeed);
                
                // Update score display
                updateScores();
            }

            function resizeCanvas() {
                const container = canvas.parentElement;
                const size = Math.min(container.clientWidth - 24, 580);
                canvas.width = size;
                canvas.height = size;
                tileSize = size / tileCount;
            }

            function generateFood() {
                food = {
                    x: Math.floor(Math.random() * tileCount),
                    y: Math.floor(Math.random() * tileCount)
                };
                // Make sure food doesn't spawn on snake
                while (snake.some(segment => segment.x === food.x && segment.y === food.y)) {
                    food.x = Math.floor(Math.random() * tileCount);
                    food.y = Math.floor(Math.random() * tileCount);
                }
            }

            function updateScores() {
                document.getElementById('score').textContent = score;
                if (score > bestScore) {
                    bestScore = score;
                    document.getElementById('bestScore').textContent = bestScore;
                }
            }

            function gameUpdate() {
                if (!isGameRunning) return;

                // Move snake
                const head = { x: snake[0].x + dx, y: snake[0].y + dy };
                
                // Check wall collision
                if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                    gameOver();
                return;
            }

                // Check self collision
                if (snake.some(segment => segment.x === head.x && segment.y === head.y)) {
                    gameOver();
                    return;
            }

                // Add new head
            snake.unshift(head);

                // Check food collision
                if (head.x === food.x && head.y === food.y) {
                    // Increase score
                    score += 10;
                    updateScores();
                    
                    // Generate new food
                generateFood();
                    
                    // Increase speed
                    if (gameSpeed > 50) {
                        gameSpeed -= 5;
                        clearInterval(gameLoop);
                        gameLoop = setInterval(gameUpdate, gameSpeed);
                    }
            } else {
                    // Remove tail
                snake.pop();
            }

                // Draw game
            draw();
        }

        function draw() {
                // Clear canvas
                ctx.fillStyle = '#1e1e2e';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

                // Draw snake
            snake.forEach((segment, index) => {
                    ctx.fillStyle = index === 0 ? '#22c55e' : '#4ade80';
                    ctx.shadowColor = 'rgba(74, 222, 128, 0.5)';
                    ctx.shadowBlur = 15;
                    ctx.fillRect(
                        segment.x * tileSize + 1,
                        segment.y * tileSize + 1,
                        tileSize - 2,
                        tileSize - 2
                    );
                });
                
                // Draw food
                ctx.fillStyle = '#f43f5e';
                ctx.shadowColor = 'rgba(244, 63, 94, 0.5)';
                ctx.shadowBlur = 15;
            ctx.beginPath();
                ctx.arc(
                    (food.x + 0.5) * tileSize,
                    (food.y + 0.5) * tileSize,
                    tileSize / 2.5,
                    0,
                    Math.PI * 2
                );
            ctx.fill();

                // Reset shadow
                ctx.shadowBlur = 0;
            }

            function gameOver() {
                isGameRunning = false;
                clearInterval(gameLoop);
                document.body.classList.remove('game-active');
                
                // Save score to database
                const playerName = localStorage.getItem('playerName');
                if (playerName && score > 0) {
                    fetch('/PlayZone/SaveScore', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({
                            playerName: playerName,
                            score: score
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update leaderboard with new top scores
                            const leaderboardGrid = document.querySelector('.leaderboard-grid');
                            leaderboardGrid.innerHTML = '';
                            
                            data.topScores.forEach((score, index) => {
                                const playerCard = document.createElement('div');
                                playerCard.className = 'player-card';
                                playerCard.innerHTML = `
                                    <div class="player-rank">${index + 1}</div>
                                    <div class="player-name">${score.playerName}</div>
                                    <div class="player-score">${score.score}</div>
                                `;
                                leaderboardGrid.appendChild(playerCard);
                            });
                        }
                    })
                    .catch(error => console.error('Error saving score:', error));
                }
                
                // Show game over screen
                if (gameOverDialog) {
                    document.getElementById('finalScore').textContent = score;
                    gameOverDialog.style.display = 'block';
                }
            }

            // Handle keyboard controls
            document.addEventListener('keydown', function(e) {
                if (!isGameRunning) return;
                
                switch(e.key) {
                    case 'ArrowUp':
                        if (dy !== 1) { dx = 0; dy = -1; }
                        break;
                    case 'ArrowDown':
                        if (dy !== -1) { dx = 0; dy = 1; }
                        break;
                    case 'ArrowLeft':
                        if (dx !== 1) { dx = -1; dy = 0; }
                        break;
                    case 'ArrowRight':
                        if (dx !== -1) { dx = 1; dy = 0; }
                        break;
                }
                
                e.preventDefault();
            });

            // Handle touch controls
        let touchStartX = 0;
        let touchStartY = 0;
            
            canvas.addEventListener('touchstart', function(e) {
                e.preventDefault();
                touchStartX = e.touches[0].clientX;
                touchStartY = e.touches[0].clientY;
            }, { passive: false });
            
            canvas.addEventListener('touchmove', function(e) {
                e.preventDefault();
                if (!isGameRunning || !touchStartX || !touchStartY) return;
                
                const touchX = e.touches[0].clientX;
                const touchY = e.touches[0].clientY;
                const deltaX = touchX - touchStartX;
                const deltaY = touchY - touchStartY;
                
                if (Math.abs(deltaX) > 20 || Math.abs(deltaY) > 20) {
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                        // Horizontal swipe
                        if (deltaX > 0 && dx !== -1) { dx = 1; dy = 0; }
                        else if (deltaX < 0 && dx !== 1) { dx = -1; dy = 0; }
            } else {
                        // Vertical swipe
                        if (deltaY > 0 && dy !== -1) { dx = 0; dy = 1; }
                        else if (deltaY < 0 && dy !== 1) { dx = 0; dy = -1; }
                    }
                    
                    touchStartX = touchX;
                    touchStartY = touchY;
                }
            }, { passive: false });
            
            canvas.addEventListener('touchend', function(e) {
                e.preventDefault();
                touchStartX = 0;
                touchStartY = 0;
            }, { passive: false });

            // Handle window resize
            window.addEventListener('resize', function() {
                resizeCanvas();
                if (isGameRunning) draw();
            });

            // Initialize restart game function
            window.restartGame = function() {
                    initGame();
            };

            // Initialize new game function
            window.newGame = function() {
                nameDialog.style.display = 'flex';
                setTimeout(() => {
                    playerNameInput.focus();
                }, 400);
                gameOverDialog.style.display = 'none';
            };
        });
    </script>
} 